"""
AgriIntel360 - Chatbot IA avec LangChain
Assistant conversationnel pour requ√™tes SQL automatiques et analyse de donn√©es agricoles
"""

import os
import json
import re
from typing import List, Dict, Any, Optional
from datetime import datetime

from langchain.llms import OpenAI
from langchain.chat_models import ChatOpenAI
from langchain.prompts import ChatPromptTemplate, SystemMessagePromptTemplate, HumanMessagePromptTemplate
from langchain.schema import BaseOutputParser, OutputParserException
from langchain.chains import LLMChain
from langchain.memory import ConversationBufferWindowMemory
from langchain.agents import AgentType, initialize_agent, Tool
from langchain.sql_database import SQLDatabase
from langchain_experimental.sql import SQLDatabaseChain

import sqlalchemy
from sqlalchemy import create_engine, text

from app.core.config import get_settings
from app.core.database import get_db

settings = get_settings()


class SQLQueryParser(BaseOutputParser):
    """Parser pour extraire les requ√™tes SQL du texte g√©n√©r√©"""
    
    def parse(self, text: str) -> Dict[str, Any]:
        """Parse la r√©ponse du LLM pour extraire la requ√™te SQL et l'explication"""
        
        # Extraction de la requ√™te SQL
        sql_match = re.search(r'```sql\n(.*?)\n```', text, re.DOTALL | re.IGNORECASE)
        if not sql_match:
            sql_match = re.search(r'```\n(SELECT.*?)\n```', text, re.DOTALL | re.IGNORECASE)
        
        sql_query = sql_match.group(1).strip() if sql_match else None
        
        # Extraction de l'explication
        explanation_parts = text.split('```')
        explanation = explanation_parts[0].strip() if explanation_parts else text.strip()
        
        return {
            'sql_query': sql_query,
            'explanation': explanation,
            'full_response': text
        }


class AgriChatbot:
    """Chatbot IA sp√©cialis√© pour l'agriculture"""
    
    def __init__(self):
        self.settings = get_settings()
        
        # Configuration LLM
        if self.settings.OPENAI_API_KEY:
            self.llm = ChatOpenAI(
                model_name="gpt-3.5-turbo",
                temperature=0.1,
                openai_api_key=self.settings.OPENAI_API_KEY,
                max_tokens=1000
            )
        else:
            # Mode d√©mo sans OpenAI
            self.llm = None
            print("‚ö†Ô∏è Pas de cl√© OpenAI - Mode d√©mo activ√©")
        
        # Base de donn√©es
        self.db_engine = create_engine(self.settings.database_url_async.replace('+asyncpg', ''))
        self.sql_database = SQLDatabase(self.db_engine)
        
        # M√©moire conversationnelle
        self.memory = ConversationBufferWindowMemory(
            k=5,  # Garder 5 derniers √©changes
            return_messages=True,
            memory_key="chat_history"
        )
        
        # Schema de base de donn√©es pour le contexte
        self.db_schema = self._get_database_schema()
        
        # Prompt syst√®me
        self.system_prompt = self._create_system_prompt()
        
        # Parser de sortie
        self.output_parser = SQLQueryParser()
        
        # Initialisation des cha√Ænes
        self._initialize_chains()
    
    def _get_database_schema(self) -> str:
        """R√©cup√®re le sch√©ma de la base de donn√©es"""
        schema_info = []
        
        try:
            # Tables principales et leurs colonnes
            tables_info = {
                'countries': 'Pays avec informations g√©ographiques et √©conomiques (name, iso_code, region, gdp, population, agricultural_land_percent)',
                'crops': 'Types de cultures (name, scientific_name, category, growth_period_days, water_requirement)',
                'productions': 'Donn√©es de production agricole (country_id, crop_id, year, season, area_harvested_ha, production_tonnes, yield_tonnes_per_ha, producer_price_usd)',
                'weather_data': 'Donn√©es m√©t√©orologiques (country_id, date, temperature_celsius, humidity_percent, precipitation_mm, wind_speed_kmh)',
                'price_data': 'Prix des cultures (country_id, crop_id, date, price_usd_per_kg, market_name, supply_level, demand_level)',
                'predictions': 'Pr√©dictions IA (country_id, crop_id, prediction_type, target_date, predicted_value, confidence_score)',
                'alerts': 'Alertes syst√®me (title, message, alert_type, severity, country_id, crop_id)'
            }
            
            for table, description in tables_info.items():
                schema_info.append(f"- {table}: {description}")
            
            return "\n".join(schema_info)
            
        except Exception as e:
            return "Sch√©ma de base de donn√©es non disponible"
    
    def _create_system_prompt(self) -> str:
        """Cr√©e le prompt syst√®me pour le chatbot"""
        return f"""Tu es AgriBot, un assistant IA expert en agriculture africaine et en analyse de donn√©es. 
Tu aides les utilisateurs √† analyser leurs donn√©es agricoles en g√©n√©rant des requ√™tes SQL et en fournissant des insights.

CONTEXTE DE LA BASE DE DONN√âES:
{self.db_schema}

R√àGLES IMPORTANTES:
1. G√©n√®re UNIQUEMENT des requ√™tes SELECT (pas d'INSERT, UPDATE, DELETE)
2. Utilise des JOINtures appropri√©es entre les tables
3. Formate toujours tes requ√™tes SQL entre ```sql et ```
4. Fournis une explication claire avant la requ√™te
5. Limite les r√©sultats avec LIMIT quand appropri√©
6. Utilise des alias pour les noms de colonnes complexes

EXEMPLES DE PAYS AFRICAINS: Togo (TG), Ghana (GH), Nigeria (NG), C√¥te d'Ivoire (CI), Burkina Faso (BF)
EXEMPLES DE CULTURES: Ma√Øs, Riz, Manioc, Igname, Cacao, Caf√©, Coton, Arachide

STYLE DE R√âPONSE:
- Sois professionnel mais accessible
- Explique le contexte agricole quand pertinent  
- Sugg√®re des insights suppl√©mentaires
- Utilise des emoji pertinents (üåæ, üìä, üåç, etc.)"""
    
    def _initialize_chains(self):
        """Initialise les cha√Ænes LangChain"""
        if not self.llm:
            return
        
        # Cha√Æne SQL
        self.sql_chain = SQLDatabaseChain.from_llm(
            llm=self.llm,
            db=self.sql_database,
            verbose=False,
            return_intermediate_steps=True
        )
        
        # Prompt pour requ√™tes g√©n√©rales
        self.chat_prompt = ChatPromptTemplate.from_messages([
            SystemMessagePromptTemplate.from_template(self.system_prompt),
            HumanMessagePromptTemplate.from_template("{question}")
        ])
        
        # Cha√Æne de conversation
        self.conversation_chain = LLMChain(
            llm=self.llm,
            prompt=self.chat_prompt,
            memory=self.memory,
            verbose=False
        )
    
    async def process_question(self, question: str, user_id: str = None) -> Dict[str, Any]:
        """Traite une question de l'utilisateur"""
        
        try:
            # Mode d√©mo sans OpenAI
            if not self.llm:
                return await self._demo_response(question)
            
            # D√©tection du type de question
            question_type = self._classify_question(question)
            
            if question_type == "sql_query":
                return await self._handle_sql_question(question)
            elif question_type == "general":
                return await self._handle_general_question(question)
            else:
                return await self._handle_chat(question)
                
        except Exception as e:
            return {
                'type': 'error',
                'message': f"D√©sol√©, j'ai rencontr√© une erreur: {str(e)}",
                'timestamp': datetime.now(),
                'error': True
            }
    
    def _classify_question(self, question: str) -> str:
        """Classifie le type de question"""
        question_lower = question.lower()
        
        # Mots-cl√©s pour requ√™tes de donn√©es
        data_keywords = [
            'combien', 'production', 'rendement', 'prix', 'm√©t√©o', 'temp√©rature',
            'pluie', 'donn√©es', 'statistiques', 'moyenne', 'total', 'comparaison',
            '√©volution', 'tendance', 'analyse', 'rapport'
        ]
        
        # Mots-cl√©s pour questions g√©n√©rales
        general_keywords = [
            'qu\'est-ce que', 'comment', 'pourquoi', 'conseil', 'recommandation',
            'expliquer', 'd√©finir', 'avantage', 'inconv√©nient'
        ]
        
        if any(keyword in question_lower for keyword in data_keywords):
            return "sql_query"
        elif any(keyword in question_lower for keyword in general_keywords):
            return "general"
        else:
            return "chat"
    
    async def _handle_sql_question(self, question: str) -> Dict[str, Any]:
        """Traite les questions n√©cessitant des requ√™tes SQL"""
        
        try:
            # G√©n√©ration de la r√©ponse avec requ√™te SQL
            response = self.conversation_chain.run(question=question)
            parsed = self.output_parser.parse(response)
            
            # Ex√©cution de la requ√™te si elle existe
            data = None
            if parsed['sql_query']:
                data = await self._execute_sql_query(parsed['sql_query'])
            
            return {
                'type': 'sql_response',
                'message': parsed['explanation'],
                'sql_query': parsed['sql_query'],
                'data': data,
                'timestamp': datetime.now(),
                'error': False
            }
            
        except Exception as e:
            return {
                'type': 'error',
                'message': f"Erreur lors du traitement de la requ√™te: {str(e)}",
                'timestamp': datetime.now(),
                'error': True
            }
    
    async def _handle_general_question(self, question: str) -> Dict[str, Any]:
        """Traite les questions g√©n√©rales sur l'agriculture"""
        
        try:
            response = self.conversation_chain.run(question=question)
            
            return {
                'type': 'general_response',
                'message': response,
                'timestamp': datetime.now(),
                'error': False
            }
            
        except Exception as e:
            return {
                'type': 'error',
                'message': f"Erreur lors du traitement: {str(e)}",
                'timestamp': datetime.now(),
                'error': True
            }
    
    async def _handle_chat(self, question: str) -> Dict[str, Any]:
        """Traite les questions de chat g√©n√©ral"""
        
        try:
            response = self.conversation_chain.run(question=question)
            
            return {
                'type': 'chat_response',
                'message': response,
                'timestamp': datetime.now(),
                'error': False
            }
            
        except Exception as e:
            return {
                'type': 'error',
                'message': f"Erreur lors du chat: {str(e)}",
                'timestamp': datetime.now(),
                'error': True
            }
    
    async def _execute_sql_query(self, sql_query: str) -> Optional[List[Dict]]:
        """Ex√©cute une requ√™te SQL de mani√®re s√©curis√©e"""
        
        try:
            # Validation de s√©curit√© basique
            if not self._is_safe_query(sql_query):
                raise Exception("Requ√™te non autoris√©e")
            
            # Ex√©cution de la requ√™te
            with self.db_engine.connect() as connection:
                result = connection.execute(text(sql_query))
                
                # Conversion en liste de dictionnaires
                columns = result.keys()
                data = [dict(zip(columns, row)) for row in result.fetchall()]
                
                # Limitation du nombre de r√©sultats
                return data[:100]  # Max 100 r√©sultats
                
        except Exception as e:
            print(f"Erreur SQL: {e}")
            return None
    
    def _is_safe_query(self, sql_query: str) -> bool:
        """V√©rifie si une requ√™te SQL est s√©curis√©e"""
        
        sql_lower = sql_query.lower().strip()
        
        # Liste des mots-cl√©s interdits
        forbidden_keywords = [
            'insert', 'update', 'delete', 'drop', 'create', 'alter',
            'truncate', 'grant', 'revoke', 'exec', 'execute',
            'sp_', 'xp_', '--', '/*', '*/', ';'
        ]
        
        # V√©rifier les mots-cl√©s interdits
        for keyword in forbidden_keywords:
            if keyword in sql_lower:
                return False
        
        # Doit commencer par SELECT
        if not sql_lower.startswith('select'):
            return False
        
        return True
    
    async def _demo_response(self, question: str) -> Dict[str, Any]:
        """R√©ponses de d√©monstration quand OpenAI n'est pas disponible"""
        
        question_lower = question.lower()
        
        # R√©ponses pr√©d√©finies pour la d√©mo
        if any(word in question_lower for word in ['production', 'rendement', 'mais', 'riz']):
            return {
                'type': 'demo_response',
                'message': "üåæ **Analyse de Production Agricole**\n\nSelon nos donn√©es, voici les tendances de production:\n\n‚Ä¢ **Ma√Øs au Togo**: Rendement moyen de 2.1 tonnes/ha\n‚Ä¢ **Riz au Ghana**: Production de 680,000 tonnes en 2023\n‚Ä¢ **√âvolution**: +15% par rapport √† 2022\n\n*Note: Ceci est une r√©ponse de d√©monstration. Configurez votre cl√© OpenAI pour des analyses personnalis√©es.*",
                'demo_data': [
                    {'pays': 'Togo', 'culture': 'Ma√Øs', 'rendement': 2.1, 'ann√©e': 2023},
                    {'pays': 'Ghana', 'culture': 'Riz', 'production': 680000, 'ann√©e': 2023}
                ],
                'timestamp': datetime.now(),
                'error': False
            }
        
        elif any(word in question_lower for word in ['prix', 'march√©', 'co√ªt']):
            return {
                'type': 'demo_response',
                'message': "üí∞ **Analyse des Prix**\n\nTendances des prix actuelles:\n\n‚Ä¢ **Ma√Øs**: 380 USD/tonne (+5% ce mois)\n‚Ä¢ **Cacao**: 2,450 USD/tonne (-2% ce mois)\n‚Ä¢ **Riz**: 420 USD/tonne (stable)\n\n*Donn√©es simul√©es pour la d√©monstration.*",
                'demo_data': [
                    {'culture': 'Ma√Øs', 'prix': 380, '√©volution': '+5%'},
                    {'culture': 'Cacao', 'prix': 2450, '√©volution': '-2%'},
                    {'culture': 'Riz', 'prix': 420, '√©volution': 'stable'}
                ],
                'timestamp': datetime.now(),
                'error': False
            }
        
        elif any(word in question_lower for word in ['m√©t√©o', 'climat', 'pluie', 'temp√©rature']):
            return {
                'type': 'demo_response',
                'message': "üå§Ô∏è **Conditions M√©t√©orologiques**\n\nSituation climatique actuelle:\n\n‚Ä¢ **Temp√©rature moyenne**: 28¬∞C\n‚Ä¢ **Pr√©cipitations**: 45mm cette semaine\n‚Ä¢ **Humidit√©**: 75%\n‚Ä¢ **Pr√©vision**: Conditions favorables pour les cultures\n\n*Donn√©es m√©t√©o de d√©monstration.*",
                'demo_data': [
                    {'indicateur': 'Temp√©rature', 'valeur': '28¬∞C'},
                    {'indicateur': 'Pr√©cipitations', 'valeur': '45mm'},
                    {'indicateur': 'Humidit√©', 'valeur': '75%'}
                ],
                'timestamp': datetime.now(),
                'error': False
            }
        
        else:
            return {
                'type': 'demo_response',
                'message': f"ü§ñ **AgriBot - Mode D√©monstration**\n\nJe suis votre assistant IA pour l'agriculture africaine. Je peux vous aider avec:\n\n‚Ä¢ üìä Analyses de production et rendements\n‚Ä¢ üí∞ Tendances des prix et march√©s  \n‚Ä¢ üå§Ô∏è Donn√©es m√©t√©orologiques\n‚Ä¢ üîÆ Pr√©dictions agricoles\n‚Ä¢ üìà Rapports personnalis√©s\n\n**Votre question**: {question}\n\n*Pour des analyses personnalis√©es avec vos donn√©es, configurez votre cl√© OpenAI dans les param√®tres.*",
                'timestamp': datetime.now(),
                'error': False
            }
    
    def get_suggested_questions(self) -> List[str]:
        """Retourne une liste de questions sugg√©r√©es"""
        return [
            "Quelle est la production de ma√Øs au Togo cette ann√©e ?",
            "Compare les rendements de riz entre le Ghana et le Nigeria",
            "Montre-moi l'√©volution des prix du cacao ces 5 derni√®res ann√©es",
            "Quelles sont les pr√©dictions m√©t√©o pour la saison des pluies ?",
            "Analyse la corr√©lation entre pr√©cipitations et rendements",
            "Quels pays ont la meilleure productivit√© agricole ?",
            "Comment les prix du caf√© ont-ils √©volu√© ce mois-ci ?",
            "Donne-moi les alertes actives pour les cultures",
            "Quel est l'impact du changement climatique sur l'agriculture ?",
            "Recommande des strat√©gies d'optimisation des rendements"
        ]
    
    def clear_memory(self):
        """Efface la m√©moire conversationnelle"""
        self.memory.clear()


# Instance globale du chatbot
agri_chatbot = AgriChatbot()


async def process_chat_message(message: str, user_id: str = None) -> Dict[str, Any]:
    """Point d'entr√©e pour traiter les messages du chat"""
    return await agri_chatbot.process_question(message, user_id)


def get_chat_suggestions() -> List[str]:
    """R√©cup√®re les questions sugg√©r√©es"""
    return agri_chatbot.get_suggested_questions()