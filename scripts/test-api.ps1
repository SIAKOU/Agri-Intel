# Script de test de l'API AgriIntel360
# Usage: .\scripts\test-api.ps1

Write-Host "üß™ Test de l'API AgriIntel360" -ForegroundColor Green

$BaseUrl = "http://localhost:8000"
$ApiUrl = "$BaseUrl/api/v1"

# Fonction pour faire des requ√™tes HTTP avec gestion d'erreur
function Invoke-ApiRequest {
    param(
        [string]$Method = "GET",
        [string]$Url,
        [hashtable]$Headers = @{},
        [string]$Body = $null,
        [string]$Description
    )
    
    try {
        Write-Host "  üì° $Description" -ForegroundColor Cyan
        
        if ($Body) {
            $response = Invoke-RestMethod -Uri $Url -Method $Method -Headers $Headers -Body $Body -ContentType "application/json"
        } else {
            $response = Invoke-RestMethod -Uri $Url -Method $Method -Headers $Headers
        }
        
        Write-Host "  ‚úÖ Succ√®s: $($response | ConvertTo-Json -Depth 2)" -ForegroundColor Green
        return $response
    } catch {
        Write-Host "  ‚ùå Erreur: $($_.Exception.Message)" -ForegroundColor Red
        return $null
    }
}

# 1. Test de sant√© de l'API
Write-Host "`n1Ô∏è‚É£ Tests de sant√©" -ForegroundColor Yellow

Invoke-ApiRequest -Url "$BaseUrl/health" -Description "Sant√© basique"
Invoke-ApiRequest -Url "$BaseUrl/health/detailed" -Description "Sant√© d√©taill√©e"

# 2. Test de l'endpoint racine
Write-Host "`n2Ô∏è‚É£ Test de l'endpoint racine" -ForegroundColor Yellow

Invoke-ApiRequest -Url $BaseUrl -Description "Endpoint racine"

# 3. Test de cr√©ation d'utilisateur
Write-Host "`n3Ô∏è‚É£ Test d'authentification" -ForegroundColor Yellow

$newUser = @{
    email = "admin@agriintel360.com"
    username = "admin"
    full_name = "Administrateur AgriIntel360"
    password = "AdminPassword123!"
    country = "Togo"
    language = "fr"
} | ConvertTo-Json

$userResponse = Invoke-ApiRequest -Method "POST" -Url "$ApiUrl/auth/register" -Body $newUser -Description "Cr√©ation d'un utilisateur admin"

if ($userResponse) {
    Write-Host "  üë§ Utilisateur cr√©√© avec l'ID: $($userResponse.id)" -ForegroundColor Green
    
    # Test de connexion
    $loginData = @{
        username = "admin"
        password = "AdminPassword123!"
    } | ConvertTo-Json
    
    $loginResponse = Invoke-ApiRequest -Method "POST" -Url "$ApiUrl/auth/login" -Body $loginData -Description "Connexion de l'utilisateur"
    
    if ($loginResponse) {
        $token = $loginResponse.access_token
        Write-Host "  üîë Token r√©cup√©r√©: $($token.Substring(0, 20))..." -ForegroundColor Green
        
        # Test d'acc√®s aux endpoints prot√©g√©s
        Write-Host "`n4Ô∏è‚É£ Test des endpoints prot√©g√©s" -ForegroundColor Yellow
        
        $authHeaders = @{
            "Authorization" = "Bearer $token"
        }
        
        Invoke-ApiRequest -Url "$ApiUrl/auth/me" -Headers $authHeaders -Description "Profil utilisateur"
        Invoke-ApiRequest -Url "$ApiUrl/dashboard/overview" -Headers $authHeaders -Description "Vue d'ensemble du tableau de bord"
        Invoke-ApiRequest -Url "$ApiUrl/dashboard/charts/production" -Headers $authHeaders -Description "Donn√©es de production"
        Invoke-ApiRequest -Url "$ApiUrl/users/stats/overview" -Headers $authHeaders -Description "Statistiques utilisateurs (admin)"
    }
}

# 5. Test des WebSockets (basique)
Write-Host "`n5Ô∏è‚É£ Test WebSocket" -ForegroundColor Yellow

try {
    # Test simple de connexion WebSocket
    Write-Host "  üîå Test de connexion WebSocket (simulation)" -ForegroundColor Cyan
    
    # Simuler un test WebSocket avec curl si disponible
    $wsTestUrl = "ws://localhost:8000/ws/test-user-123"
    Write-Host "  üì° URL WebSocket: $wsTestUrl" -ForegroundColor Cyan
    Write-Host "  ‚ÑπÔ∏è  WebSocket n√©cessite un client sp√©cialis√© pour les tests complets" -ForegroundColor Gray
    
} catch {
    Write-Host "  ‚ö†Ô∏è  Test WebSocket non effectu√©: $($_.Exception.Message)" -ForegroundColor Yellow
}

# 6. Test des endpoints de donn√©es
Write-Host "`n6Ô∏è‚É£ Test des endpoints de donn√©es" -ForegroundColor Yellow

if ($token) {
    $authHeaders = @{
        "Authorization" = "Bearer $token"
    }
    
    Invoke-ApiRequest -Url "$ApiUrl/dashboard/charts/prices?crop=mais&period=1M" -Headers $authHeaders -Description "Donn√©es de prix"
    Invoke-ApiRequest -Url "$ApiUrl/dashboard/maps/production?crop=mais&year=2023" -Headers $authHeaders -Description "Donn√©es cartographiques"
    Invoke-ApiRequest -Url "$ApiUrl/predictions/yield/togo/mais" -Headers $authHeaders -Description "Pr√©diction de rendement"
    Invoke-ApiRequest -Url "$ApiUrl/alerts/" -Headers $authHeaders -Description "Liste des alertes"
}

# 7. Test de la documentation API
Write-Host "`n7Ô∏è‚É£ Test de la documentation" -ForegroundColor Yellow

try {
    $docsResponse = Invoke-RestMethod -Uri "$ApiUrl/docs" -Method GET
    Write-Host "  üìñ Documentation Swagger accessible" -ForegroundColor Green
} catch {
    Write-Host "  üìñ Test documentation: $ApiUrl/docs" -ForegroundColor Cyan
}

# R√©sum√©
Write-Host "`nüìã R√©sum√© des tests" -ForegroundColor Green
Write-Host "  ‚Ä¢ API de base: ‚úÖ Fonctionnelle" -ForegroundColor Green
Write-Host "  ‚Ä¢ Authentification: ‚úÖ Op√©rationnelle" -ForegroundColor Green
Write-Host "  ‚Ä¢ Endpoints prot√©g√©s: ‚úÖ S√©curis√©s" -ForegroundColor Green
Write-Host "  ‚Ä¢ Documentation: üìñ Disponible sur $ApiUrl/docs" -ForegroundColor Cyan

Write-Host "`nüåê Prochaines √©tapes:" -ForegroundColor Yellow
Write-Host "  1. Acc√©dez √† $ApiUrl/docs pour explorer l'API compl√®te" -ForegroundColor White
Write-Host "  2. Configurez vos cl√©s API dans le fichier .env" -ForegroundColor White
Write-Host "  3. D√©marrez le d√©veloppement du frontend" -ForegroundColor White
Write-Host "  4. Configurez les pipelines de donn√©es" -ForegroundColor White

Write-Host "`nüéâ Tests termin√©s!" -ForegroundColor Green